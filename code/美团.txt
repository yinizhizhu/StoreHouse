序列中任意个连续的元素组成的子序列称为该序列的子串。
现在给你一个序列P和一个整数K，询问元素和是K的倍数的子串的最大长度。
比如序列【1,2,3,4,5】，给定的整数K为 5，其中满足条件的子串为{5}、{2,3}、{1,2,3,4}、{1,2,3,4,5}，
那么答案就为 5，因为最长的子串为{1,2,3,4,5}；如果满足条件的子串不存在，就输出 0。

第一含一个整数N, 1 ≤ 𝑁 ≤ 105 。
第二行包含 N 个整数𝑝𝑖 ，𝑝𝑖 表示序列P第i个元素的值。0 ≤ 𝑝𝑖 ≤ 105 。
第三行包含一个整数 K， 1 ≤ 𝐾 ≤ 105  。


输出一个整数ANS，表示答案。

Input Sample 1
5
1 2 3 4 5
5
Input Sample 2
6
3 1 2 7 7 7
4

Output Sample 1
5
Output Sample 2
5

#include <iostream>
#include <algorithm>
#include <vector>
#include <string>

using namespace std;

int calc(vector<int>& container, int k) {
	int ans = 0, step;
	int i, j, n = container.size();
	for (i = 0; i < n - 1 && n - i > ans; i++) {
		step = container[i];
		if (ans == 0 && step % k == 0) ans = 1;
		for (j = i + 1; j < n; j++) {
			step += container[j];
			if (step %k == 0 && ans < j - i + 1)
				ans = j - i + 1;
		}
	}
	return ans;
}

int main() {
	int n, i, k;
	vector<int> container;
	cin >> n;
	for (i = 0; i < n; i++) {
		cin >> k;
		container.push_back(k);
	}
	cin >> k;
	cout << calc(container, k) << endl;
	return 0;
}

在上小学的时候，我们经常碰到这样的事：
考完试后老师懒得改试卷，
于是让我们同桌相互交换试卷后为对方批改。
但是后来老师发现这样作容易出现作弊，
于是他想了一个新办法。
老师将同学分成了 n 个组，
其中编号为𝑖的组中有𝑠𝑖 个人。
然后老师会按某种顺序依次访问这些组。
对于他访问的第一个组，
他会将这组内的所有试卷都收走，
放置在桌上；对于他后续访问的每一个组，
首先他会从桌上的试卷最上方拿出该组对应人数数量的试卷，
随机分配给该组每个人一张试卷让他们进行批改，
而后再将这组学生自己考的试卷收走放置在桌面试卷的最下方。
当他访问完所有的组后他会将桌面上
剩余的所有试卷随机分配给他第一个访问的组的学生进行批改。
但他发现这种方法有时候也会出现问题：
有可能在中途访问到某个组的时候
桌面上的试卷不够分配给这组学生每人一张；
也有可能最后会有学生分配到批改自己的试卷，
而且这两种情况是否出现是与他访问每个组的顺序有关的。
现在他想知道是否存在一种访问顺序能够使以上两种情况都不出现，
顺利完成试卷批改呢？ 

第一一个整数𝑛，表示学生组数。2 ≤ 𝑛 ≤ 30
第二行包含𝑛个整数，𝑠1 ,𝑠2 ,…,𝑠𝑛 ，分别表示每组学生的人数。1 ≤ 𝑠𝑖 ≤ 10000

Input Sample 1
2
10 20
Input Sample 2
4
2 3 3 1

Output Sample 1
No
Input Sample 2
Yes