4 1
3 4 0
-1 0
2 0
-1 3 0

2 1
0 2 0
-1 0

#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <queue>
#include <stack>
#include <vector>

#define INT_LEE -2147483648

using namespace std;

void show(stack<int>& con) {
	while (!con.empty()) {
		cout << con.top();
		con.pop();
		if (!con.empty())
			cout << " ";
	}
	cout << endl;
}

void getInt(stack<int>& con, char* str, int& n) {
	int ans = 0, carry = 1;
	int i = strlen(str) - 1;
	for (; i >= 0; i--) {
		carry = 1;
		for (ans = 0; i >= 0 && str[i] >= '0' && str[i] <= '9'; i--, carry *= 10)
			ans += (str[i] - '0')*carry;
		if (i >= 0 && str[i] == '-') {
			ans *= -1;
			i--;
		}
		con.push(ans);
		n++;
		ans = -2;
	}
	if (ans >= -1) {
		con.push(ans);
		n++;
	}
}

void handle(vector<stack<int> >& container, int n) {
	int cur, next;
	for (; n && !container[0].empty(); n--) {
		cur = container[0].top();
		if (container[cur].empty())
			continue;
		next = container[cur].top();
		if (next == -1) {
			show(container[0]);
			return;
		}
		else if (next == 0) {
			cout << "R" << endl;
			return;
		}
		else
			container[0].push(next);
	}
	cout << "E" << endl;
}

int main() {
	int n, k, i, tag;
	char line[101];
	vector<stack<int> > container;
	cin >> n >> k;
	container.resize(n + 1);
	getchar();
	for (i = 1, tag = n; i <= n; i++) {
		cin.getline(line, 100, '\n');
		getInt(container[i], line, tag);
	}
	container[0].push(k);
	handle(container, tag*tag);
	return 0;
}
